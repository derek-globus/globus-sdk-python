
classDiagram
    class BaseClient {
        + bound_session: BoundSession
        __init__(..., *, session: GlobusSession)
        default_auth_requirements() AuthRequirements
        resource_server() str
    }

    BaseClient "has 1" *-- BoundSession
    BaseClient "provides" -- AuthRequirements

    class RequestsTransport {
        def request(..., session: BoundSession) requests.Response
    }
    RequestsTransport "accepts" -- BoundSession

    class BoundSession {
        - resource_server: str
        - session: GlobusSession
        + add_requirements(requirements: AuthRequirements)
        + get_authorizer() GlobusAuthorizer
    }
    BoundSession "has 1" *-- GlobusSession
    BoundSession "provides" -- GlobusAuthorizer

    class GlobusSession {
        - requirements_registry: RequirementsRegistry
        - authorizer_cache: AuthorizerRegistry
        + add_requirement(resource_server: str, requirements: AuthRequirements)
        * get_authorizer(resource_server: str) GlobusAuthorizer
    }
    GlobusSession "creates" -- GlobusAuthorizer
    GlobusSession "has 1" *-- RequirementsRegistry
    GlobusSession "has 1" *-- AuthorizerRegistry

    class GlobusClientSession {
        + app_name: str
        - client: ConfidentialAppAuthClient
        - token_store StorageAdapter
    }
    GlobusClientSession ..|> GlobusSession

    class GlobusUserSession {
        + app_name: str
        - client: AuthLoginClient
        - login_flow_manager LoginFlowManager
        - token_store StorageAdapter
    }
    GlobusUserSession ..|> GlobusSession
    GlobusUserSession "has 1" *-- LoginFlowManager

    class RequirementsRegistry {
        - the_registry: dict~str~AuthRequirements~~
        + register_requirements(resource_server: str, requirements: AuthRequirements)
        + get_requirements(resource_server: str) AuthRequirements
    }

    RequirementsRegistry "has n" *-- AuthRequirements

    class AuthorizerRegistry {
        - the_registry: dict~str~GlobusAuthorizer~~
        + register_authorizer(resource_server: str, authorizer: GlobusAuthorizer)
        + get_authorizer(resource_server: str) GlobusAuthorizer
    }

    AuthorizerRegistry "has n" *-- GlobusAuthorizer

    class AuthRequirements {
        + required_scopes: list~Scope~
        + session_required_identities: list~str~
        + session_required_policies: list~str~
        + session_required_single_domain: list~str~
        + session_required_mfa: bool
    }

    class LoginFlowManager {
        - client AuthLoginClient
        + run_login_flow(resource_server: str, requirements: AuthRequirements) AuthToken
    }

    LoginFlowManager "accepts" -- AuthRequirements

    class LocalWebserverLoginFlowManager
    LocalWebserverLoginFlowManager ..|> LoginFlowManager

    class CommandLineLoginFlowManager
    CommandLineLoginFlowManager ..|> LoginFlowManager
