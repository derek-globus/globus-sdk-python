
classDiagram
    class BaseClient {
        - authorizer_provider: AuthorizerProvider
        $ auth_requirements(constructor_params) AuthRequirements
        $ resource_server(constructor_params) str
    }

    BaseClient "has 1" *-- GlobusAuthorizerProvider
    BaseClient "provides" -- AuthRequirements

    class GlobusSession {
        + get_client(client_class: Type~BaseClient~, *args, additional_requirements: AuthRequirements, **kwargs) BaseClient
        + get_authorizer_provider() GlobusAuthorizerProvider
    }
    GlobusSession "creates" -- BaseClient
    GlobusSession "creates" -- GlobusAuthorizerProvider
    GlobusSession "accepts" -- AuthRequirements

    class ClientSession {
        + app_name: str
        - client: ConfidentialAppAuthClient
        - token_cache StorageAdapter
    }
    ClientSession ..|> GlobusSession

    class UserProxySession {
        + app_name: str
        - client: AuthLoginClient
    }
    UserProxySession ..|> GlobusSession

    class GlobusAuthorizerProvider {
        + resource_server: str
        + requirements: AuthRequirements
        + get_authorizer() Authorizer
        + update_requirements(requirements: AuthRequirements)
    }

    GlobusAuthorizerProvider "has 1" *-- AuthRequirements

    class ClientAuthorizerProvider {
        - client ConfidentialAppAuthClient
        - token_store StorageAdapter
    }
    ClientAuthorizerProvider ..|> GlobusAuthorizerProvider

    class UserProxyAuthorizerProvider {
        - login_flow_manager LoginFlowManager
        - token_cache StorageAdapter
    }
    UserProxyAuthorizerProvider ..|> GlobusAuthorizerProvider
    UserProxyAuthorizerProvider "has 1" *-- LoginFlowManager

    class AuthRequirements {
        + required_scopes: list~Scope~
        + session_required_identities: list~str~
        + session_required_policies: list~str~
        + session_required_single_domain: list~str~
        + session_required_mfa: bool
    }

    class LoginFlowManager {
        - client AuthLoginClient
        + run_login_flow(resource_server: str, requirements: AuthRequirements) AuthToken
    }

    LoginFlowManager "accepts" -- AuthRequirements

    class LocalWebserverLoginFlowManager
    LocalWebserverLoginFlowManager ..|> LoginFlowManager

    class CommandLineLoginFlowManager
    CommandLineLoginFlowManager ..|> LoginFlowManager
